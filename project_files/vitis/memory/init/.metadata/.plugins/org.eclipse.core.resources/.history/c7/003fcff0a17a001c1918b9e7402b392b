#include <cstdint>
#include <cstddef>

#include <type_traits>

#define REFLOWOS_STD(type) constexpr static type

namespace reflowOS {
	template <typename MemoryAllocType, typename MemoryAllocator, typename MemoryScheduler>
	class basic_memory_manager
	{
	public:
		typedef MemoryAllocType  alloc_type;
		typedef alloc_type*		 alloc_pointer;
		typedef alloc_type&		 alloc_reference;
		typedef std::size_t 	 alloc_size;

		typedef MemoryAllocator  allocator_type;
		REFLOWOS_STD(alloc_size) alloc_unit = sizeof(alloc_type);

	public:
		template <typename... InitArgs>
		basic_memory_manager (InitArgs&&...);
		~basic_memory_manager();

	public:
		alloc_pointer allocate  (alloc_size); // alloc_size : Count of the Allocation Object.
		alloc_pointer allocate  (alloc_size, alloc_pointer);
		void		  deallocate(alloc_pointer, alloc_size);

	private:
		allocator_type __M_mman_allocator;
	};
}

template <typename MemoryAllocType, typename MemoryAllocator>
template <typename... InitArgs>
reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::basic_memory_manager(InitArgs&&... init_args) : __M_mman_allocator(std::forward<InitArgs>(init_args)...)
{

}

template <typename MemoryAllocType, typename MemoryAllocator>
reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::~basic_memory_manager()
{

}

template <typename MemoryAllocType, typename MemoryAllocator>
typename reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::alloc_pointer reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::allocate(alloc_size alloc_count)
{
	return reinterpret_cast<alloc_pointer>(__M_mman_allocator.allocate(sizeof(alloc_count) * alloc_unit));
}

template <typename MemoryAllocType, typename MemoryAllocator>
typename reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::alloc_pointer reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::allocate(alloc_size alloc_count, alloc_pointer alloc_hint)
{
	return reinterpret_cast<alloc_pointer>(__M_mman_allocator.allocate(sizeof(alloc_count) * alloc_unit), alloc_hint);
}

template <typename MemoryAllocType, typename MemoryAllocator>
void		  reflowOS::basic_memory_manager<MemoryAllocType, MemoryAllocator>::deallocate(alloc_pointer alloc_count, alloc_size alloc_hint)
{
	return __M_mman_allocator.deallocate(alloc_count, alloc_hint);
}
