#include <xparameters.h>

#include <cstddef>
#include <cstdint>

#define REFLOW_STATIC_VARIABLE(type, name, value) static constexpr type name = value;
#define REFLOW_DEFINE_TYPE(type, redefine)		  typedef type redefine;

namespace reflow_firmware::memory {
	REFLOW_DEFINE_TYPE(std::size_t  , size_type)
	REFLOW_DEFINE_TYPE(std::uint8_t*, pointer_type)

	REFLOW_STATIC_VARIABLE(size_type, pointer_base, XPAR_MIG_7SERIES_0_BASEADDR)
	REFLOW_STATIC_VARIABLE(size_type, pointer_dedicated, XPAR_MIG_7SERIES_0_BASEADDR);

	REFLOW_STATIC_VARIABLE(size_type, block_size , 4096)
	REFLOW_STATIC_VARIABLE(size_type, memory_size, 256 * 1024 * 1024)
	REFLOW_STATIC_VARIABLE(size_type, block_count, memory_size / block_size)

	struct block	 { std::uint8_t context[block_size] ; };
	struct block_map { block		context[block_count]; };
	struct block_tag { std::uint8_t tag	   [block_count]; };

	enum class block_state : std::uint8_t
	{
		allocated,
		unallocated,
		reserved,
		locked
	};
}
